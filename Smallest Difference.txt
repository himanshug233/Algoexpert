/*
Smallest Difference

Write a function that takes in two non-empty arrays of integers, finds the pair of numbers (one from each array) whose absolute difference is closest to
zero, and returns an array containing these two numbers, with the number from the first array in the first position.

You can assume that there will only be one pair of numbers with the smallest difference.

Sample Input
arrayOne = [-1, 5, 10, 20, 28, 3]
arrayTwo = [26, 134, 135, 15, 17]

Sample Output
[28,26]
*/

//Please write main yourself

//Solution

#include <algorithm>
#include <climits>
#include <vector>
//#include <bits/stdc++.h>
using namespace std;

vector<int> smallestDifference(vector<int> arrayOne, vector<int> arrayTwo) {
  sort(arrayOne.begin(),arrayOne.end());
	sort(arrayTwo.begin(),arrayTwo.end());
	int smallestsum = INT_MAX;
	int currentsum;
	int i = 0, j = 0;
	vector<int> smallestpair;
	while(i < arrayOne.size() && j < arrayTwo.size()){
		int firstnum = arrayOne[i];
		int secondnum = arrayTwo[j];
		if(firstnum < secondnum){
			currentsum = secondnum - firstnum;
			i++;
		}
		else if(secondnum < firstnum){
			currentsum = firstnum - secondnum;
			j++;
		}
		else
			return vector<int> {firstnum, secondnum};
		
		if(smallestsum > currentsum){
			smallestsum = currentsum;
			cout<<smallestsum<<" ";
			smallestpair = {firstnum, secondnum};
		}
	}
  return smallestpair;
}
